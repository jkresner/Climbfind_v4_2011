@model AreaEditViewModel
@{ Area area = ViewBag.Area; Country country = AppLookups.Country(area.CountryID);
   SelectList geoTypeSelectList = ViewBag.PlaceTypeDropDownList;
   bool HasGeoThresholdPrivilages = CfPrincipal.Current.IsInRole("ModAdmin");
   bool HasMapImage = ViewBag.MapImageToDisplayUrl != Stgs.DefaultMapInfoImage;
   MapItem mapItemsArea = ViewBag.MapItemsArea;
   System.Collections.ObjectModel.Collection<MapItem> mapItemsLocations = ViewBag.MapItemsLocations;
   ViewContext.ClientValidationEnabled = true;
   Bing7GeoJsonMapViewModel mapModel = Model.MapModel;
   Bing7MapViewOptionsViewModel mapView = Model.MapModel.ViewOptions;
   bool hasMapView = (mapView != null && !string.IsNullOrWhiteSpace(mapView.MapTypeId));
   bool hasHeading = (mapView != null && !string.IsNullOrWhiteSpace(mapView.Heading));
   string mapTypeId = mapView.MapTypeId ?? "auto";
   if (hasHeading && mapView.Heading != "0") { mapTypeId = "birdseye"; }
   bool mapIsBirdsEye = (mapTypeId == "birdseye");
   bool hasSeniorModPrivilages = CfPrincipal.IsSeniorMod;
   Layout = "~/Views/Moderate/_LayoutModerate.cshtml";
   CfPageTitleMaster.Set("Mod Area: {0}", area.Name);
}        
<div>

<script type="text/javascript" src="http://ecn.dev.virtualearth.net/mapcontrol/mapcontrol.ashx?v=7.0"></script><script type="text/javascript" src="@Stgs.StaticRt/js/cf.maps-v1.js"></script>

<script type="text/javascript">
    
    $(document).ready(function () {

        $("#WktDiv").hide();        
        
        @if (HasGeoThresholdPrivilages) {<text>$("#EditGeoReduceThreshold").show();</text> } 
        @if (area.Type != CfType.Province) {<text>$("#EditGeoReduceThreshold").hide();</text>}

        @if (!HasMapImage) { <text>$("#NoMapImageDiv").show();</text> } else {
        <text>$("#HasMapImageDiv").show(); </text> }
        $("#dialog-upload-map-image").dialog({ autoOpen: false, width:820, height:620, modal: true });
        $(".openDialogue").click(function() { openUploadDialog(); return false; });

        GetMap();
    });

    var map = null;
    var infoBoxContents = [];

    function GetMap()
    {
        map = RenderDefaultCfBing7Map('myMap', 'ArIOaOmY-BqIbbf1Ueo_9McVfA9iTm_WdfX9-Boyeyg_ZuSN1dCeNQ5d1bvxsdgt', 
            Microsoft.Maps.MapTypeId.@mapTypeId);
        
        var areaLayer = new Microsoft.Maps.EntityCollection();
        var polygonCoordinates = parse2dPolygonCoords('@mapItemsArea.C');
        areaLayer.push(new Microsoft.Maps.Polygon(polygonCoordinates, EditPolygonViewOptions));
        map.entities.push(areaLayer);

        var areaBoundingBox = GetPolygonBoundingLocationRect(polygonCoordinates);
        var areaCenter = new Microsoft.Maps.Location('@area.Latitude', '@area.Longitude');
        map.setView({ bounds: areaBoundingBox });

        //-- putting locations on top of area means we can hover over them
        addLocationsToMap();

        @if (area.Type == CfType.ClimbingArea || (area.Type == CfType.City && hasSeniorModPrivilages)) {
        <text>AddResizeCornersToBoundingBox(map, areaLayer, $("#WKT"), areaBoundingBox, areaCenter); </text>
        }

        @if (hasMapView) {<text>
        var mapCenter = new Microsoft.Maps.Location('@mapView.MapCenterLatitude', '@mapView.MapCenterLongitude');
        var viewOpt = { center : mapCenter, zoom : @mapView.Zoom };

        @if (hasHeading) {<text> viewOpt.heading = parseInt(@mapView.Heading);</text>}

        map.setView(viewOpt);
        </text>} 
    }

    function addLocationsToMap()
    {
        var locationLayer = new Microsoft.Maps.EntityCollection();
        var wtf = new GeoJsonLayer('myMap', map, '@Stgs.StaticRt/map', '@Stgs.ImgsRt/places', EditPolylineViewOptions, EditPolygonViewOptions);
        @foreach(var item in mapItemsLocations) {<text>
        var mapItemJson = JSON.parse('@Html.Raw(item.ToJson())');
        wtf.AddJsonMapItem(locationLayer, mapItemJson);
        </text>
        }

        map.entities.push(locationLayer);
    }

    function toggleWkt()
    {
        var lnk = $("#toggleWktLink");
        
        if (lnk.text() == 'show wkt') { lnk.text('hide wkt'); } 
        else { lnk.text('show wkt'); }

        $("#WktDiv").toggle();
    }

    function openUploadDialog() { $("#dialog-upload-map-image").dialog("open"); resetWebCrop(); }

    function setResultImg(jsonResult) 
    {
        //-- In case we want to use it again.
        resetWebCrop(); 
        
        $("#AreaMapImg").attr("src", jsonResult.SavedImgUrl);
        $("#dialog-upload-map-image").dialog("close");

        $("#HasMapImageDiv").show();
        $("#NoMapImageDiv").hide();     
    }

</script>

    @using (Html.BeginForm()) {

        <div style="float:left;width:65%">
            
        <h1>Mod: <a href="@area.SlugUrl">@area.Name</a>, @country.Name</h1>    
            
        <div style="float:left;width:50%">

        <div class="editor-label">
            @Html.LabelFor(m => m.PlaceType) @Html.ValidationMessageFor(m => m.PlaceType)
        </div>
        <div class="editor-field">
            @Html.DropDownListFor(m => m.PlaceType, geoTypeSelectList)             
        </div>    

        <div class="editor-label">
            @Html.LabelFor(m => m.Name) @Html.ValidationMessageFor(m => m.Name)
        </div>
        <div class="editor-field">@Html.TextBoxFor(m => m.Name)</div>    
           
        <div class="editor-label">
            @Html.LabelFor(m => m.NameUrlPart) @Html.ValidationMessageFor(m => m.NameUrlPart)
        </div>
        <div class="editor-field">@Html.TextBoxFor(m => m.NameUrlPart)</div>
            
         <div class="editor-label">
            @Html.LabelFor(m => m.NameShort) @Html.ValidationMessageFor(m => m.NameShort)
        </div>
        <div class="editor-field">@Html.TextBoxFor(m => m.NameShort, new { @class = "short" })</div>

        <div id="EditGeoReduceThreshold" style="display:none">

        <div class="editor-label">@Html.LabelFor(m => m.GeoReduceThreshold) @Html.ValidationMessageFor(m => m.GeoReduceThreshold)</div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.GeoReduceThreshold, new { @class = "short" })
        </div>

        </div>

        </div>

        @if (area.Type != CfType.Province) {
        <div style="float:right;width:280px;text-align:center;margin-right:10px">
            <fieldset style="padding:3px"><legend>Map image [<a href="#" class="openDialogue">edit</a>]</legend>
                <div id="NoMapImageDiv" style="display:none">
                    <p>@Model.Name has no map image!</p>
                    <p><b><a href="#" class="openDialogue">Upload one now...</a></b></p>               
                </div>
                <div id="HasMapImageDiv" style="display:none">
                    <img id="AreaMapImg" src="@(ViewBag.MapImageToDisplayUrl)" alt="area map image" />
                </div>
            </fieldset>
        </div>
        }

        <hr />

        <div class="editor-label">
            @Html.LabelFor(m => m.WKT) <a id="toggleWktLink" href="javascript:toggleWkt()">show wkt</a> @Html.ValidationMessageFor(m => m.WKT)
        </div>
        <div class="editor-field">
            <div id="myMap" style="position:relative; width:100%; height:400px;"></div>
            @Html.EditorFor(m =>m.MapModel.ViewOptions, "Bing7MapViewOptions")
        </div>    
        <hr />
        <div id="WktDiv">@Html.TextAreaFor(m => m.WKT, 10, 110, null)</div>    

        <div class="editor-label">@Html.LabelFor(m => m.Description) @Html.ValidationMessageFor(m => m.Description)</div>
        <div class="editor-field">
            @Html.TextAreaFor(m => m.Description, new { @class = "description" })              
        </div>

        <div class="editor-label">@Html.LabelFor(m => m.SearchSupportString) @Html.ValidationMessageFor(m => m.SearchSupportString)</div>
        <div class="editor-field">
            @Html.TextBoxFor(m => m.SearchSupportString, new { @class = "long" })              
        </div>

        <div class="editor-label">@Html.LabelFor(m => m.NoIndoorConfirmed)</div>
        <div class="editor-field">
            @Html.CheckBoxFor(m => m.NoIndoorConfirmed)              
        </div>
            
        @Html.Partial("Partials/FormOptions", new FormOptionsViewModel { CancelUrl = area.SlugUrl,
            DeleteUrl = Url.Action("AreaDelete", new { id = Model.ID } ) })

        </div>
        
        
        <div class="mod-guide">
    
            <h4>Mod guidelines for areas:</h4>
            <span>Supplementary mod knowledge @@ <a href="http://wiki.climbfind.org/index.php/Moderators_Project" target="_blank">The CF Wiki</a></span>
            <ol class="ModTips">
                <li>Name should not contain country or state. E.g. <i style="color:Red">Boulder, USA</i> or <i style="color:Red">Boulder, Colorado</i> or <i style="color:Red">Boulder, CO</i> should just be <b style="color:Green">Boulder</b>.</li>
                <li>Name should not be abbreviated. E.g. <i style="color:Red">Yosemite</i> should be <b style="color:Green">Yosemite National Park</b> and
                'Yosemite' should be used for the <b style="color:green">Abbreviated name</b>.</li>
                <li>Url part should match the name. E.g. <i style="color:Red">New York City</i> should have a url part of 
                    <b style="color:green">new-york-city</b> so if you change the 'Name' field, update the Url part
                    to be consistent.</li>
                <li>Map view of an area should be the road map view or most zoomed out level of the high resolution aerial photo (Bird’s Eye View).</li>
                <li>Access should include any safety or legal concerns- private land, etc.</li>
                <li>The Area photo should be an iconic photo from afar- entice people to come with a view of what it is like to see it for the first time!</li>
            </ol>
        </div>
            
        <hr />
    }
</div>

<!-- loaded from ajax call -->
<div id="dialog-upload-map-image" title="Upload a map image for @area.Name" class="dialog-upload-image">
   @Html.Partial("Partials/WebUrlImageCropper", new WebUrlCropImageModel() {
            PostActionUrl = "/Moderate/SaveAreaMapImageFromWebUrl", 
            ObjID = area.ID.ToString(), 
            MinWidth = 220,
            MinHeight = 120,
            AllowUpload = true,
            JavascriptSuccessCallback = "setResultImg"
   })
        
</div>

