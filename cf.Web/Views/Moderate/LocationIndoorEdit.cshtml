@model LocationIndoorEditViewModel
@{ LocationIndoor location = ViewBag.Location; Country country = AppLookups.Country(location.CountryID);
   ViewBag.Title = "Edit " + Model.Name;
    Layout = "~/Views/Moderate/_LayoutModerate.cshtml";
   SelectList placeTypeSelectList = SelectLists.IndoorLocationTypeSelectList;
   bool HasLogoImage = ViewBag.LogoImageToDisplayUrl != Stgs.DefaultMapInfoImage;
   bool HasClimbingImage = ViewBag.ClimbingImageToDisplayUrl != Stgs.DefaultMapInfoImage; 
}

<script type="text/javascript">

    $(document).ready(function () {
        
        @if (!HasLogoImage) { <text>$("#NoLogoImageDiv").show();</text> } else {
        <text>$("#HasLogoImageDiv").show(); </text> }
        
        @if (!HasClimbingImage) { <text>$("#NoClimbingImageDiv").show();</text> } else {
        <text>$("#HasClimbingImageDiv").show(); </text> }

        $("#dialog-upload-image").dialog({ autoOpen: false, width:760, height:680, modal: true });
        $(".openDialogue").click(function() { openUploadDialog(this); return false; });
        
        //-- IE 8 F%^74k
        $("#LogoImg").attr("src", "@(ViewBag.LogoImageToDisplayUrl)");
        $("#ClimbingImg").attr("src", "@(ViewBag.ClimbingImageToDisplayUrl)");
    });

    
    var currentUploadImage;
    function openUploadDialog(link)
    {
        //-- In case we want to use it again.
        resetWebCrop(); 
                
        currentUploadImage = link.id;
        if (currentUploadImage == 'Logo')
        {
            imageSaveAjaxPostUrl = '@Url.Action("SaveLocationIndoorLogoImageFromWebUrl", (string)"Moderate")';
        }
        if (currentUploadImage == 'Climbing')
        {
            imageSaveAjaxPostUrl = '@Url.Action("SaveLocationAvatarFromWebUrl", (string)"Moderate")';
        }
        
        $("#dialog-upload-image").dialog("open");
        
    }

    function setResultImg(jsonResult) 
    {
        //-- In case we want to use it again.
        resetWebCrop(); 
        
        if (currentUploadImage == 'Logo')
        {
            $("#HasLogoImageDiv").show();
            $("#NoLogoImageDiv").hide(); 
            $("#LogoImg").attr("src", jsonResult.SavedImgUrl);
        }
        if (currentUploadImage == 'Climbing')
        {
           $("#HasClimbingImageDiv").show();
           $("#NoClimbingImageDiv").hide(); 
           $("#ClimbingImg").attr("src", jsonResult.SavedImgUrl);
        }

        $("#dialog-upload-image").dialog("close");         
    }


</script>

@using (Html.BeginForm())
{
    @Html.ValidationSummary(true)

        <div style="float:left;width:65%">

<div style="float:left;width:50%">                
<h1>Mod: <a href="@location.SlugUrl">@location.Name</a></h1>

@Html.HiddenFor(model => model.ID)

<div class="editor-label">@Html.LabelFor(m => m.Type) @Html.ValidationMessageFor(m => m.Type)</div>
<div class="editor-field">@Html.DropDownListFor(m => m.Type, placeTypeSelectList)</div>   

<div class="editor-label">@Html.LabelFor(model => model.Name) @Html.ValidationMessageFor(model => model.Name)</div>
<div class="editor-field">@Html.EditorFor(model => model.Name) </div>

<div class="editor-label">@Html.LabelFor(model => model.NameUrlPart) @Html.ValidationMessageFor(model => model.NameUrlPart)</div>
<div class="editor-field">@Html.EditorFor(model => model.NameUrlPart)</div>

<div class="editor-label">@Html.LabelFor(model => model.NameShort) @Html.ValidationMessageFor(model => model.NameShort)</div>
<div class="editor-field">@Html.EditorFor(model => model.NameShort)</div>

<div class="editor-label">@Html.LabelFor(model => model.Website) @Html.ValidationMessageFor(model => model.Website)</div>
<div class="editor-field">@Html.EditorFor(model => model.Website) </div>

<div class="editor-label">@Html.LabelFor(model => model.BlogRssUrl) @Html.ValidationMessageFor(model => model.BlogRssUrl)</div>
<div class="editor-field">@Html.EditorFor(model => model.BlogRssUrl)</div>

<div class="editor-label">@Html.LabelFor(model => model.ContactEmail) @Html.ValidationMessageFor(model => model.ContactEmail)</div>
<div class="editor-field">@Html.EditorFor(model => model.ContactEmail) </div>

<div class="editor-label">@Html.LabelFor(model => model.ContactPhone) @Html.ValidationMessageFor(model => model.ContactPhone)</div>
<div class="editor-field">@Html.EditorFor(model => model.ContactPhone, new { @class = "short" })</div>

<div class="editor-label">@Html.LabelFor(model => model.Address) @Html.ValidationMessageFor(model => model.Address)</div>
<div class="editor-field">@Html.EditorFor(model => model.Address, new { @class = "long" })</div>

<div class="editor-label">@Html.LabelFor(model => model.MapAddress) @Html.ValidationMessageFor(model => model.MapAddress)</div>
<div class="editor-field">@Html.EditorFor(model => model.MapAddress, new { @class = "long" })</div>

@Html.EditorFor(model=> model.LatLongEditorModel, "Bing7EditLocationMap")

@Html.HiddenFor(model => model.Latitude)
@Html.HiddenFor(model => model.Longitude)

<hr />
<div class="editor-label"><label style="float:left;display:block">Floor space m</label><sup style="font-size:10px;position:relative;margin-top:-3px;font-weight:bold;float:left;display:block">2</sup> <i style="float:left;display:block"> (to nearest meter)</i> @Html.ValidationMessageFor(model => model.FloorspaceInSqMeters)</div>
<div class="editor-field">@Html.EditorFor(model => model.FloorspaceInSqMeters)</div>

<div class="editor-label">@Html.LabelFor(model => model.HeightInMeters) <i>(to nearest meter)</i> @Html.ValidationMessageFor(model => model.HeightInMeters)</div>
<div class="editor-field">@Html.EditorFor(model => model.HeightInMeters)</div>

<div class="editor-label">@Html.LabelFor(model => model.NumberOfLines) @Html.ValidationMessageFor(model => model.NumberOfLines)</div>
<div class="editor-field">@Html.EditorFor(model => model.NumberOfLines) </div>

</div>


<div class="formImageUpload">
    <fieldset><legend>Logo [<a id="Logo" href="#" class="openDialogue">edit</a>]</legend>
        <div id="NoLogoImageDiv">
            <p>@Model.Name has no logo!</p>
            <p><b><a id="Logo" href="#" class="openDialogue">Upload one now...</a></b></p>               
        </div>
        <div id="HasLogoImageDiv">
            <img id="LogoImg" alt="logo image" />
        </div>
    </fieldset>
</div>

<div class="formImageUpload">
    <fieldset style="margin-top:20px"><legend>Climbing image [<a id="Climbing" href="#" class="openDialogue">edit</a>]</legend>
        <div id="NoClimbingImageDiv">
            <p>@Model.Name has no climbing image!</p>
            <p><b><a id="Climbing" href="#" class="openDialogue">Upload one now...</a></b></p>               
        </div>
        <div id="HasClimbingImageDiv">
            <img id="ClimbingImg" alt="logo image" />
        </div>
    </fieldset>
</div>

<hr />

<div style="float:left;width:50%">

<div class="editor-label">@Html.LabelFor(model => model.Prices) @Html.ValidationMessageFor(model => model.Prices)</div>
<div class="editor-field">@Html.EditorFor(model => model.Prices)</div>

<div class="editor-label">@Html.LabelFor(model => model.Description)  @Html.ValidationMessageFor(model => model.Description)</div>
<div class="editor-field">@Html.TextAreaFor(model => model.Description, new { @class = "description" })</div>

</div>

<hr />
<div class="editor-label">@Html.LabelFor(model => model.HasTopRope) @Html.ValidationMessageFor(model => model.HasTopRope)</div>
<div class="editor-field">@Html.EditorFor(model => model.HasTopRope)</div>

<div class="editor-label">@Html.LabelFor(model => model.HasBoulder) @Html.ValidationMessageFor(model => model.HasBoulder)</div>
<div class="editor-field">@Html.EditorFor(model => model.HasBoulder)</div>

<div class="editor-label">@Html.LabelFor(model => model.HasLead) @Html.ValidationMessageFor(model => model.HasLead)</div>
<div class="editor-field">@Html.EditorFor(model => model.HasLead)</div>


<div class="editor-label"> @Html.LabelFor(model => model.SearchSupportString) @Html.ValidationMessageFor(model => model.SearchSupportString)</div>
<div class="editor-field">@Html.EditorFor(model => model.SearchSupportString)</div>

@Html.Partial("Partials/FormOptions", new FormOptionsViewModel { CancelUrl = location.SlugUrl,
    DeleteUrl = Url.Action("LocationIndoorDelete", new { id = Model.ID } ) })

            </div>
    <div class="mod-guide">
        <h4>Mod guidelines for gyms:</h4>
        <span>Supplementary mod knowledge @@ <a href="http://wiki.climbfind.org/index.php/Moderators_Project" target="_blank">The CF Wiki</a></span>
        <ol>
            <li>Guideline 1....</li>
            <li>Guideline 2....</li>
            <li>Guideline 3....</li>
        </ol>
    </div>
            
        <hr />
}


<div id="dialog-upload-image" title="Upload image for @location.Name">
        
        @Html.Partial("Partials/WebUrlImageCropper", new WebUrlCropImageModel()
   {
       PostActionUrl = "/Moderate/SaveLocationIndoorLogoImageFromWebUrl",
       ObjID = location.ID.ToString(),
       MinWidth = 220,
       MinHeight = 120,  
       JavascriptSuccessCallback = "setResultImg", 
       AllowUpload =true
   })
        
</div>
