//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace cf.Entities
{
    public partial class Setter
    {
        #region Primitive Properties
    
        public virtual System.Guid ID
        {
            get;
            set;
        }
    
        public virtual string NickName
        {
            get;
            set;
        }
    
        public virtual string Initials
        {
            get;
            set;
        }
    
        public virtual string Bio
        {
            get;
            set;
        }
    
        public virtual bool DefaultAnonymous
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> LastActivityUtc
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> LastClimbID
        {
            get;
            set;
        }
    
        public virtual Nullable<double> Rating
        {
            get;
            set;
        }
    
        public virtual int RatingCount
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<Climb> Climbs
        {
            get
            {
                if (_climbs == null)
                {
                    var newCollection = new FixupCollection<Climb>();
                    newCollection.CollectionChanged += FixupClimbs;
                    _climbs = newCollection;
                }
                return _climbs;
            }
            set
            {
                if (!ReferenceEquals(_climbs, value))
                {
                    var previousValue = _climbs as FixupCollection<Climb>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupClimbs;
                    }
                    _climbs = value;
                    var newValue = value as FixupCollection<Climb>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupClimbs;
                    }
                }
            }
        }
        private ICollection<Climb> _climbs;
    
        public virtual ICollection<LocationIndoor> LocationsIndoors
        {
            get
            {
                if (_locationsIndoors == null)
                {
                    var newCollection = new FixupCollection<LocationIndoor>();
                    newCollection.CollectionChanged += FixupLocationsIndoors;
                    _locationsIndoors = newCollection;
                }
                return _locationsIndoors;
            }
            set
            {
                if (!ReferenceEquals(_locationsIndoors, value))
                {
                    var previousValue = _locationsIndoors as FixupCollection<LocationIndoor>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLocationsIndoors;
                    }
                    _locationsIndoors = value;
                    var newValue = value as FixupCollection<LocationIndoor>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLocationsIndoors;
                    }
                }
            }
        }
        private ICollection<LocationIndoor> _locationsIndoors;

        #endregion
        #region Association Fixup
    
        private void FixupClimbs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Climb item in e.NewItems)
                {
                    item.Setter = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Climb item in e.OldItems)
                {
                    if (ReferenceEquals(item.Setter, this))
                    {
                        item.Setter = null;
                    }
                }
            }
        }
    
        private void FixupLocationsIndoors(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LocationIndoor item in e.NewItems)
                {
                    if (!item.Setters.Contains(this))
                    {
                        item.Setters.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LocationIndoor item in e.OldItems)
                {
                    if (item.Setters.Contains(this))
                    {
                        item.Setters.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
