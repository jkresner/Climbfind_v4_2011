//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace cf.Entities
{
    public partial class Message
    {
        #region Primitive Properties
    
        public virtual System.Guid ID
        {
            get;
            set;
        }
    
        public virtual System.Guid ConversationID
        {
            get { return _conversationID; }
            set
            {
                if (_conversationID != value)
                {
                    if (Conversation != null && Conversation.ID != value)
                    {
                        Conversation = null;
                    }
                    _conversationID = value;
                }
            }
        }
        private System.Guid _conversationID;
    
        public virtual System.DateTime Utc
        {
            get;
            set;
        }
    
        public virtual System.Guid SenderID
        {
            get;
            set;
        }
    
        public virtual string Content
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<MessagePartyStatus> MessagePartyStatus
        {
            get
            {
                if (_messagePartyStatus == null)
                {
                    var newCollection = new FixupCollection<MessagePartyStatus>();
                    newCollection.CollectionChanged += FixupMessagePartyStatus;
                    _messagePartyStatus = newCollection;
                }
                return _messagePartyStatus;
            }
            set
            {
                if (!ReferenceEquals(_messagePartyStatus, value))
                {
                    var previousValue = _messagePartyStatus as FixupCollection<MessagePartyStatus>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMessagePartyStatus;
                    }
                    _messagePartyStatus = value;
                    var newValue = value as FixupCollection<MessagePartyStatus>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMessagePartyStatus;
                    }
                }
            }
        }
        private ICollection<MessagePartyStatus> _messagePartyStatus;
    
        public virtual Conversation Conversation
        {
            get { return _conversation; }
            set
            {
                if (!ReferenceEquals(_conversation, value))
                {
                    var previousValue = _conversation;
                    _conversation = value;
                    FixupConversation(previousValue);
                }
            }
        }
        private Conversation _conversation;

        #endregion
        #region Association Fixup
    
        private void FixupConversation(Conversation previousValue)
        {
            if (previousValue != null && previousValue.Messages.Contains(this))
            {
                previousValue.Messages.Remove(this);
            }
    
            if (Conversation != null)
            {
                if (!Conversation.Messages.Contains(this))
                {
                    Conversation.Messages.Add(this);
                }
                if (ConversationID != Conversation.ID)
                {
                    ConversationID = Conversation.ID;
                }
            }
        }
    
        private void FixupMessagePartyStatus(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (MessagePartyStatus item in e.NewItems)
                {
                    item.Message = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (MessagePartyStatus item in e.OldItems)
                {
                    if (ReferenceEquals(item.Message, this))
                    {
                        item.Message = null;
                    }
                }
            }
        }

        #endregion
    }
}
