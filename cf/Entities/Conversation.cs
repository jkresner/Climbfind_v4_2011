//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace cf.Entities
{
    public partial class Conversation
    {
        #region Primitive Properties
    
        public virtual System.Guid ID
        {
            get;
            set;
        }
    
        public virtual System.DateTime StartedUtc
        {
            get;
            set;
        }
    
        public virtual System.Guid PartyAID
        {
            get;
            set;
        }
    
        public virtual byte PartyATypeID
        {
            get;
            set;
        }
    
        public virtual System.Guid PartyBID
        {
            get;
            set;
        }
    
        public virtual byte PartyBTypeID
        {
            get;
            set;
        }
    
        public virtual System.DateTime LastActivityUtc
        {
            get;
            set;
        }
    
        public virtual System.Guid LastSenderID
        {
            get;
            set;
        }
    
        public virtual string LastExcerpt
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<ConversationView> ConversationViews
        {
            get
            {
                if (_conversationViews == null)
                {
                    var newCollection = new FixupCollection<ConversationView>();
                    newCollection.CollectionChanged += FixupConversationViews;
                    _conversationViews = newCollection;
                }
                return _conversationViews;
            }
            set
            {
                if (!ReferenceEquals(_conversationViews, value))
                {
                    var previousValue = _conversationViews as FixupCollection<ConversationView>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupConversationViews;
                    }
                    _conversationViews = value;
                    var newValue = value as FixupCollection<ConversationView>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupConversationViews;
                    }
                }
            }
        }
        private ICollection<ConversationView> _conversationViews;
    
        public virtual ICollection<Message> Messages
        {
            get
            {
                if (_messages == null)
                {
                    var newCollection = new FixupCollection<Message>();
                    newCollection.CollectionChanged += FixupMessages;
                    _messages = newCollection;
                }
                return _messages;
            }
            set
            {
                if (!ReferenceEquals(_messages, value))
                {
                    var previousValue = _messages as FixupCollection<Message>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMessages;
                    }
                    _messages = value;
                    var newValue = value as FixupCollection<Message>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMessages;
                    }
                }
            }
        }
        private ICollection<Message> _messages;

        #endregion
        #region Association Fixup
    
        private void FixupConversationViews(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ConversationView item in e.NewItems)
                {
                    item.Conversation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ConversationView item in e.OldItems)
                {
                    if (ReferenceEquals(item.Conversation, this))
                    {
                        item.Conversation = null;
                    }
                }
            }
        }
    
        private void FixupMessages(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Message item in e.NewItems)
                {
                    item.Conversation = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Message item in e.OldItems)
                {
                    if (ReferenceEquals(item.Conversation, this))
                    {
                        item.Conversation = null;
                    }
                }
            }
        }

        #endregion
    }
}
