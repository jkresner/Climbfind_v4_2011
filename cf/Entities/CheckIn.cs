//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace cf.Entities
{
    public partial class CheckIn
    {
        #region Primitive Properties
    
        public virtual System.Guid ID
        {
            get;
            set;
        }
    
        public virtual System.Guid UserID
        {
            get { return _userID; }
            set
            {
                if (_userID != value)
                {
                    if (Profile != null && Profile.ID != value)
                    {
                        Profile = null;
                    }
                    _userID = value;
                }
            }
        }
        private System.Guid _userID;
    
        public virtual System.Guid LocationID
        {
            get { return _locationID; }
            set
            {
                if (_locationID != value)
                {
                    if (Location != null && Location.ID != value)
                    {
                        Location = null;
                    }
                    _locationID = value;
                }
            }
        }
        private System.Guid _locationID;
    
        public virtual System.DateTime Utc
        {
            get;
            set;
        }
    
        public virtual Nullable<double> Latitude
        {
            get;
            set;
        }
    
        public virtual Nullable<double> Longitude
        {
            get;
            set;
        }
    
        public virtual string Comment
        {
            get;
            set;
        }
    
        public virtual bool IsPrivate
        {
            get;
            set;
        }
    
        public virtual bool ConsentFB
        {
            get;
            set;
        }
    
        public virtual bool ConsentTW
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> OutUtc
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual LocationEF Location
        {
            get { return _location; }
            set
            {
                if (!ReferenceEquals(_location, value))
                {
                    var previousValue = _location;
                    _location = value;
                    FixupLocation(previousValue);
                }
            }
        }
        private LocationEF _location;
    
        public virtual ICollection<LoggedClimb> LoggedClimbs
        {
            get
            {
                if (_loggedClimbs == null)
                {
                    var newCollection = new FixupCollection<LoggedClimb>();
                    newCollection.CollectionChanged += FixupLoggedClimbs;
                    _loggedClimbs = newCollection;
                }
                return _loggedClimbs;
            }
            set
            {
                if (!ReferenceEquals(_loggedClimbs, value))
                {
                    var previousValue = _loggedClimbs as FixupCollection<LoggedClimb>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupLoggedClimbs;
                    }
                    _loggedClimbs = value;
                    var newValue = value as FixupCollection<LoggedClimb>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupLoggedClimbs;
                    }
                }
            }
        }
        private ICollection<LoggedClimb> _loggedClimbs;
    
        public virtual ICollection<Media> Media
        {
            get
            {
                if (_media == null)
                {
                    var newCollection = new FixupCollection<Media>();
                    newCollection.CollectionChanged += FixupMedia;
                    _media = newCollection;
                }
                return _media;
            }
            set
            {
                if (!ReferenceEquals(_media, value))
                {
                    var previousValue = _media as FixupCollection<Media>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMedia;
                    }
                    _media = value;
                    var newValue = value as FixupCollection<Media>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMedia;
                    }
                }
            }
        }
        private ICollection<Media> _media;
    
        public virtual Profile Profile
        {
            get { return _profile; }
            set
            {
                if (!ReferenceEquals(_profile, value))
                {
                    var previousValue = _profile;
                    _profile = value;
                    FixupProfile(previousValue);
                }
            }
        }
        private Profile _profile;

        #endregion
        #region Association Fixup
    
        private void FixupLocation(LocationEF previousValue)
        {
            if (previousValue != null && previousValue.CheckIns.Contains(this))
            {
                previousValue.CheckIns.Remove(this);
            }
    
            if (Location != null)
            {
                if (!Location.CheckIns.Contains(this))
                {
                    Location.CheckIns.Add(this);
                }
                if (LocationID != Location.ID)
                {
                    LocationID = Location.ID;
                }
            }
        }
    
        private void FixupProfile(Profile previousValue)
        {
            if (previousValue != null && previousValue.CheckIns.Contains(this))
            {
                previousValue.CheckIns.Remove(this);
            }
    
            if (Profile != null)
            {
                if (!Profile.CheckIns.Contains(this))
                {
                    Profile.CheckIns.Add(this);
                }
                if (UserID != Profile.ID)
                {
                    UserID = Profile.ID;
                }
            }
        }
    
        private void FixupLoggedClimbs(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (LoggedClimb item in e.NewItems)
                {
                    item.CheckIn = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (LoggedClimb item in e.OldItems)
                {
                    if (ReferenceEquals(item.CheckIn, this))
                    {
                        item.CheckIn = null;
                    }
                }
            }
        }
    
        private void FixupMedia(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Media item in e.NewItems)
                {
                    if (!item.CheckIns.Contains(this))
                    {
                        item.CheckIns.Add(this);
                    }
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Media item in e.OldItems)
                {
                    if (item.CheckIns.Contains(this))
                    {
                        item.CheckIns.Remove(this);
                    }
                }
            }
        }

        #endregion
    }
}
