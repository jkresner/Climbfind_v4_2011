//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace cf.Entities
{
    public partial class ObjectModMeta
    {
        #region Primitive Properties
    
        public virtual System.Guid ID
        {
            get;
            set;
        }
    
        public virtual string Name
        {
            get;
            set;
        }
    
        public virtual byte CQR
        {
            get;
            set;
        }
    
        public virtual bool Flagged
        {
            get;
            set;
        }
    
        public virtual byte VerifiedDetails
        {
            get;
            set;
        }
    
        public virtual int VerifiedAvatar
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> VerifiedLastUtc
        {
            get;
            set;
        }
    
        public virtual System.Guid CreatedActionID
        {
            get { return _createdActionID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_createdActionID != value)
                    {
                        if (ModAction != null && ModAction.ID != value)
                        {
                            ModAction = null;
                        }
                        _createdActionID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private System.Guid _createdActionID;
    
        public virtual System.Guid CreatedByUserID
        {
            get;
            set;
        }
    
        public virtual System.DateTime CreatedUtc
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> DetailsLastChangedActionID
        {
            get { return _detailsLastChangedActionID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_detailsLastChangedActionID != value)
                    {
                        if (ModAction2 != null && ModAction2.ID != value)
                        {
                            ModAction2 = null;
                        }
                        _detailsLastChangedActionID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _detailsLastChangedActionID;
    
        public virtual Nullable<System.Guid> DetailsLastChangedByUserID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DetailsLastChangedUtc
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> AvatarLastChangedActionID
        {
            get { return _avatarLastChangedActionID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_avatarLastChangedActionID != value)
                    {
                        if (ModAction3 != null && ModAction3.ID != value)
                        {
                            ModAction3 = null;
                        }
                        _avatarLastChangedActionID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _avatarLastChangedActionID;
    
        public virtual Nullable<System.Guid> AvatarLastChangedByUserID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> AvatarLastChangedUtc
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> DeletedActionID
        {
            get { return _deletedActionID; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_deletedActionID != value)
                    {
                        if (ModAction1 != null && ModAction1.ID != value)
                        {
                            ModAction1 = null;
                        }
                        _deletedActionID = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<System.Guid> _deletedActionID;
    
        public virtual Nullable<System.Guid> DeletedByUserID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> DeletedUtc
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> FlaggedActionID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.Guid> FlaggedByUserID
        {
            get;
            set;
        }
    
        public virtual Nullable<System.DateTime> FlaggedUtc
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ModAction ModAction
        {
            get { return _modAction; }
            set
            {
                if (!ReferenceEquals(_modAction, value))
                {
                    var previousValue = _modAction;
                    _modAction = value;
                    FixupModAction(previousValue);
                }
            }
        }
        private ModAction _modAction;
    
        public virtual ModAction ModAction1
        {
            get { return _modAction1; }
            set
            {
                if (!ReferenceEquals(_modAction1, value))
                {
                    var previousValue = _modAction1;
                    _modAction1 = value;
                    FixupModAction1(previousValue);
                }
            }
        }
        private ModAction _modAction1;
    
        public virtual ModAction ModAction2
        {
            get { return _modAction2; }
            set
            {
                if (!ReferenceEquals(_modAction2, value))
                {
                    var previousValue = _modAction2;
                    _modAction2 = value;
                    FixupModAction2(previousValue);
                }
            }
        }
        private ModAction _modAction2;
    
        public virtual ModAction ModAction3
        {
            get { return _modAction3; }
            set
            {
                if (!ReferenceEquals(_modAction3, value))
                {
                    var previousValue = _modAction3;
                    _modAction3 = value;
                    FixupModAction3(previousValue);
                }
            }
        }
        private ModAction _modAction3;
    
        public virtual ICollection<ModClaim> ModClaims
        {
            get
            {
                if (_modClaims == null)
                {
                    var newCollection = new FixupCollection<ModClaim>();
                    newCollection.CollectionChanged += FixupModClaims;
                    _modClaims = newCollection;
                }
                return _modClaims;
            }
            set
            {
                if (!ReferenceEquals(_modClaims, value))
                {
                    var previousValue = _modClaims as FixupCollection<ModClaim>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupModClaims;
                    }
                    _modClaims = value;
                    var newValue = value as FixupCollection<ModClaim>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupModClaims;
                    }
                }
            }
        }
        private ICollection<ModClaim> _modClaims;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupModAction(ModAction previousValue)
        {
            if (previousValue != null && previousValue.ObjectModMetas.Contains(this))
            {
                previousValue.ObjectModMetas.Remove(this);
            }
    
            if (ModAction != null)
            {
                if (!ModAction.ObjectModMetas.Contains(this))
                {
                    ModAction.ObjectModMetas.Add(this);
                }
                if (CreatedActionID != ModAction.ID)
                {
                    CreatedActionID = ModAction.ID;
                }
            }
        }
    
        private void FixupModAction1(ModAction previousValue)
        {
            if (previousValue != null && previousValue.ObjectModMetas1.Contains(this))
            {
                previousValue.ObjectModMetas1.Remove(this);
            }
    
            if (ModAction1 != null)
            {
                if (!ModAction1.ObjectModMetas1.Contains(this))
                {
                    ModAction1.ObjectModMetas1.Add(this);
                }
                if (DeletedActionID != ModAction1.ID)
                {
                    DeletedActionID = ModAction1.ID;
                }
            }
            else if (!_settingFK)
            {
                DeletedActionID = null;
            }
        }
    
        private void FixupModAction2(ModAction previousValue)
        {
            if (previousValue != null && previousValue.ObjectModMetas2.Contains(this))
            {
                previousValue.ObjectModMetas2.Remove(this);
            }
    
            if (ModAction2 != null)
            {
                if (!ModAction2.ObjectModMetas2.Contains(this))
                {
                    ModAction2.ObjectModMetas2.Add(this);
                }
                if (DetailsLastChangedActionID != ModAction2.ID)
                {
                    DetailsLastChangedActionID = ModAction2.ID;
                }
            }
            else if (!_settingFK)
            {
                DetailsLastChangedActionID = null;
            }
        }
    
        private void FixupModAction3(ModAction previousValue)
        {
            if (previousValue != null && previousValue.ObjectModMetas3.Contains(this))
            {
                previousValue.ObjectModMetas3.Remove(this);
            }
    
            if (ModAction3 != null)
            {
                if (!ModAction3.ObjectModMetas3.Contains(this))
                {
                    ModAction3.ObjectModMetas3.Add(this);
                }
                if (AvatarLastChangedActionID != ModAction3.ID)
                {
                    AvatarLastChangedActionID = ModAction3.ID;
                }
            }
            else if (!_settingFK)
            {
                AvatarLastChangedActionID = null;
            }
        }
    
        private void FixupModClaims(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (ModClaim item in e.NewItems)
                {
                    item.ObjectModMeta = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (ModClaim item in e.OldItems)
                {
                    if (ReferenceEquals(item.ObjectModMeta, this))
                    {
                        item.ObjectModMeta = null;
                    }
                }
            }
        }

        #endregion
    }
}
